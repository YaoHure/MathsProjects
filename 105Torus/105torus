#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import math

def print_help():
    print("USAGE")
    print("    ./105torus opt a0 a1 a2 a3 a4 n")
    print()
    print("DESCRIPTION")
    print("    opt            method option:")
    print("                       1 for the bisection method")
    print("                       2 for Newton's method")
    print("    a[0-4]         coefficients of the equation")
    print("    n              precision (the application of the polynomial to the solution should be smakker than 10^-n)")

def help_me():
    if len(sys.argv) == 2:
        if sys.argv[1] == "-h":
            print_help()
        else:
            exit(84)

def error():
    try:
        if (len(sys.argv) != 8):
            print("try -h")
            exit (84)
        opt = int(sys.argv[1])
        a0 = int(sys.argv[2])
        a1 = int(sys.argv[3])
        a2 = int(sys.argv[4])
        a3 = int(sys.argv[5])
        a4 = int(sys.argv[6])
        n = int(sys.argv[7])
        if n < 0:
            print("n is too small")
            exit (84)
        if opt <= 0 or opt > 3:
            print("not a method option try again")
            exit (84)
        if (a1 == 0 and a2 ==0 and a3 == 0 and a4 == 0):
            exit (84)
    except:
        exit (84)

def function(x):
    a0 = int(sys.argv[2])
    a1 = int(sys.argv[3])
    a2 = int(sys.argv[4])
    a3 = int(sys.argv[5])
    a4 = int(sys.argv[6])
    fct = (a4 * pow(x, 4) + a3 * pow(x, 3) + a2 * pow(x, 2) + a1 * x  + a0)
    return (fct)

def function_derive(x):
    a0 = int(sys.argv[2])
    a1 = int(sys.argv[3])
    a2 = int(sys.argv[4])
    a3 = int(sys.argv[5])
    a4 = int(sys.argv[6])
    fct = (4 * a4 * pow(x, 3) + 3 * a3 * pow(x, 2) + 2 * a2 * x + a1)
    return (fct)

def bissection_method(n):
    a = 0
    b = 1
    fa = function(a);
    fb = function(b);
    tmp = 0
    tmp_bis = 1
    while abs(tmp - tmp_bis) > pow(10, -n):
        tmp_bis = tmp
        tmp = (a + b)/ 2
        if function(a) * function(tmp) <= 0:
            b = tmp
        else:
            a = tmp
        if pow(10, n) * tmp % 1 == 0:
            print("x =", tmp)
        else:
            print("x = %.*f" % (n, tmp))

def secant_method(n):
    a = 0
    b = 1
    if(function(a) * function(b) >= 0):
        exit (84)
    while (abs(a - b) > pow(10, -n)):
        x = b - ((function(b) * (b - a)) / (function(b) - function(a)))
        a = b
        b = x
        if pow(10, n) * x % 1 == 0:
            print("x =", x)
        else:
            print("x = %.*f" % (n, x))

def newton_method(n):
    a = 0.5
    b = 0
    count = 0
    while (abs(b - a) > pow(10, -n)):
        b = a
        count += 1
        if pow(10, n) * a % 1 == 0:
            print("x =", a)
        else:
            print("x = %.*f" % (n, a))
        a = a - (function(a) / function_derive(a))
        if (count > 15):
            print('Error divergence\n')
            exit (84)


def main():
    help_me()
    error()
    opt = int(sys.argv[1])
    a0 = int(sys.argv[2])
    a1 = int(sys.argv[3])
    a2 = int(sys.argv[4])
    a3 = int(sys.argv[5])
    a4 = int(sys.argv[6])
    n = int(sys.argv[7])

    if opt == 1:
        bissection_method(n)
    if opt == 2:
        newton_method(n)
    if opt == 3:
        secant_method(n)

    return 0

main()
